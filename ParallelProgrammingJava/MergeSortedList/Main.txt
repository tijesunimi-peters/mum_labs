
public class Main {
    static int limit = 2000000;
    static int[] arr1 = new int[limit];
    static int[] arr2 = new int[limit];
    static int[] finalList = new int[limit * 2];
    static String lastPrinter = "";

    static void generateData() {
        for(int i = 0; i < limit; i++) {
            // arr1[i] = (int) ((i + 1) * 3.20);
            // arr2[i] = (int) ((i + 1) * 2.317);
            arr1[i] = i * 2;
            arr2[i] = 1 + i*2;
        }
    }

    public static double sequential() {
        long startTime = System.nanoTime();
        MergeSort.merge(arr1, arr2, finalList);
        MergeSort.merge(arr2, arr1, finalList);
        long endTime = System.nanoTime();
        double duration = (endTime - startTime) / 1000000000.0;
        System.out.printf("Completed\t\t%f seconds\n",duration);
        return duration;
    }

    public static void parallel(double seqTime) {
        Thread t1 = new Thread(new ParallelMergeSort(arr1, arr2, finalList));
        Thread t2 = new Thread(new ParallelMergeSort(arr2, arr1, finalList));
        t1.setName("Array 1");
        t2.setName("Array 2");
        printOutput(t1, t1.getName(), MergeSort.getFirstPrinter());
        printOutput(t2, t2.getName(), MergeSort.getFirstPrinter());
        printOutput(t1, "------", MergeSort.getFirstPrinter());
        printOutput(t2, "------", MergeSort.getFirstPrinter());
        long startTime = System.nanoTime();
        t1.start();
        t2.start();

        try {
            t1.join();
            t2.join();
        } catch(Exception ex) {
            ex.printStackTrace();
        }
        long endTime = System.nanoTime();
        double duration = (endTime - startTime) / 1000000000.0;
        double speedUp = seqTime/duration;
        System.out.printf("\n\nCompleted\t\t%f seconds\nSpeed up\t\t%f times\nProcessor Util\t\t%f\n", duration, speedUp,speedUp/2);
    }

    static synchronized void printOutput(String tName, String content, String firstPrint) {
        if(tName.equals("main")) return;

        if(MergeSort.getFirstPrinter() == null) MergeSort.setPrinter();

        if(MergeSort.getFirstPrinter().equals(tName)) {
            if(lastPrinter.equals(tName)) System.out.println();
            System.out.printf("%s\t\t\t\t\t", content);
        } else {
            if(lastPrinter.equals(tName) || lastPrinter.equals("")) System.out.print("\r\t\t\t\t\t");
            System.out.printf("%s\n", content);
        }

        lastPrinter = tName;
    }

    static synchronized void printOutput(Thread thread, String content, String firstPrint) {
        String tName = thread.getName();

        if(tName.equals("main")) return;

        if(MergeSort.getFirstPrinter() == null) MergeSort.setPrinter(thread);

        if(MergeSort.getFirstPrinter().equals(tName)) {
            System.out.printf("%s\t\t\t\t\t", content);
        } else {
            System.out.printf("%s\n", content);
        }
    }

    public static void main (String[] args) {
        System.out.println("Genrating data");
        generateData();
        System.out.println();

        System.out.printf("Sequential\n==============\n");
        double time = sequential();
        System.out.println();
        System.out.printf("Parallel\n=================\n");
        parallel(time);

        // System.out.println();
        // System.out.println(Arrays.toString(finalList));
    }
}