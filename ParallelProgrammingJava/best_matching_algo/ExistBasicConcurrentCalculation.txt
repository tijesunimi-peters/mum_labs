package com.javferna.packtpub.mastering.bestMatching.concurrent;

import com.javferna.packtpub.mastering.bestMatching.distance.LevenshteinDistance;

import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;

public class ExistBasicConcurrentCalculation {
	private final static ITask<Integer, Integer, List<String>, String> task = (startIndex, endIndex, dictionary, word) -> {
		for (int i=startIndex; i<endIndex; i++) {
			if (LevenshteinDistance.calculate(word, dictionary.get(i))==0) {
				return true;
			}

			if (Thread.interrupted()) {
				return false;
			}
		}
		throw new Exception("The word "+word+" doesn't exists.");
	};

	public static boolean existWord(String word, List<String> dictionary) throws InterruptedException, ExecutionException {
		int numCores = Runtime.getRuntime().availableProcessors();
		ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(numCores);

		int size = dictionary.size();
		int step = size / numCores;
		int startIndex, endIndex;
//		List<ExistBasicTask> tasks = new ArrayList<>();
		List<Callable<Boolean>> tasks = new ArrayList<>();

		for (int i = 0; i < numCores; i++) {
			startIndex = i * step;
			if (i == numCores - 1) {
				endIndex = dictionary.size();
			} else {
				endIndex = (i + 1) * step;
			}
			int localStart = startIndex;
			int localEnd = endIndex;

			tasks.add(() -> task.apply(localStart, localEnd, dictionary, word));
		}
		try {
			Boolean result = executor.invokeAny(tasks);
			return result;
		} catch (ExecutionException e) {
			if (e.getCause() instanceof NoSuchElementException)
				return false;
			throw e;
		} finally {
			executor.shutdown();
		}
	}
}
